services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-eventstore
    environment:
      POSTGRES_DB: eventstore
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=4", "-c", "max_wal_senders=4"]
    networks:
      - event-sourcing-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - event-sourcing-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"  # Adicione esta porta para comunicação interna
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - event-sourcing-network

  debezium-connect:
    image: debezium/connect:2.4
    container_name: debezium-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      # Configuração adicional para garantir conectividade
      CONNECT_REQUEST_TIMEOUT_MS: 30000
      CONNECT_RETRY_BACKOFF_MS: 1000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/connectors" ]
      interval: 20s
      timeout: 10s
      retries: 10
    volumes:
      - ./docker/debezium/register-postgres.json:/kafka/config/register-postgres.json
    networks:
      - event-sourcing-network

  debezium-init:
    image: curlimages/curl:7.85.0
    container_name: debezium-init
    depends_on:
      debezium-connect:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "/kafka/config/init.sh" ]
    volumes:
      - ./docker/debezium/register-postgres.json:/kafka/config/register-postgres.json
      - ./docker/debezium/init.sh:/kafka/config/init.sh
    networks:
      - event-sourcing-network

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: [ "/bin/bash", "-c" ]
    command: >
      "sleep 10 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic outbox.public.event_outbox --partitions 1 --replication-factor 1 &&
      kafka-configs --bootstrap-server kafka:29092 --alter --entity-type topics --entity-name outbox.public.event_outbox --add-config retention.ms=604800000"
    networks:
      - event-sourcing-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium-connect:8083
    networks:
      - event-sourcing-network

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: pedido_read_db
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - event-sourcing-network

volumes:
  postgres_data:
  mongo_data:

networks:
  event-sourcing-network:
    driver: bridge
